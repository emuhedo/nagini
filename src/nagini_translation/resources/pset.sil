/*
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */

function PSet___create__(prim: Set[Ref], cont_type: PyType): Ref
    ensures typeof(result) == PSet(cont_type)
    ensures PSet___unbox__(result) == prim

function PSet___unbox__(box: Ref): Set[Ref]
    requires issubtypePSet(typeof(box), PSet_arg(typeof(box), 0))

function PSet___contains__(self: Ref, item: Ref): Bool
    requires issubtypePSet(typeof(self), PSet_arg(typeof(self), 0))
    ensures result == (item in PSet___unbox__(self))
    ensures result ==> issubtype(typeof(item), PSet_arg(typeof(self), 0))

function PSet___sil_seq__(self: Ref): Seq[Ref]
    requires issubtypePSet(typeof(self), PSet_arg(typeof(self), 0))
    ensures forall r: Ref :: {r in result} r in result == r in PSet___unbox__(self)
    ensures |result| == |PSet___unbox__(self)|

function PSet___len__(self: Ref): Int
    requires issubtypePSet(typeof(self), PSet_arg(typeof(self), 0))
    ensures result == |PSet___unbox__(self)|

function PSet___add__(self: Ref, other: Ref): Ref
    requires issubtypePSet(typeof(self), PSet_arg(typeof(self), 0))
    requires issubtypePSet(typeof(other), PSet_arg(typeof(other), 0))
    requires PSet_arg(typeof(self), 0) == PSet_arg(typeof(other), 0)
    ensures result == PSet___create__(PSet___unbox__(self) union PSet___unbox__(other), PSet_arg(typeof(self), 0))

function PSet___sub__(self: Ref, other: Ref): Ref
    requires issubtypePSet(typeof(self), PSet_arg(typeof(self), 0))
    requires issubtypePSet(typeof(other), PSet_arg(typeof(other), 0))
    requires PSet_arg(typeof(self), 0) == PSet_arg(typeof(other), 0)
    ensures result == PSet___create__(PSet___unbox__(self) setminus PSet___unbox__(other), PSet_arg(typeof(self), 0))

function PSet___eq__(self: Ref, other: Ref): Bool
    requires issubtypePSet(typeof(self), PSet_arg(typeof(self), 0))
    requires issubtypePSet(typeof(other), PSet_arg(typeof(other), 0))
    requires PSet_arg(typeof(self), 0) == PSet_arg(typeof(other), 0)
    ensures result == (PSet___unbox__(self) == PSet___unbox__(other))
